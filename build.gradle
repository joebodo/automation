import automation.HacGroovyTask
import automation.HacImpexTask
import groovy.io.FileType

gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

def antHome = "$platform_home/apache-ant"

ant.'ant.home' = antHome
ant.lifecycleLogLevel = "INFO"
ant.properties["env.ANT_OPTS"] = "-Xmx2g -XX:MaxPermSize=400m -Dfile.encoding=UTF-8"

task antAll(group: 'build', description: 'ant all') {
	doFirst {
		ant.ant antfile: "build.xml", target: "all", dir: platform_home
	}
}

task antClean(group: 'build', description: 'ant clean') {
	doFirst {
		ant.ant antfile: "build.xml", target: "clean", dir: platform_home
	}
}

task antCleanAll(group: 'build', description: 'ant clean all') {
	doFirst {
		ant.ant antfile: "build.xml", target: "clean", dir: platform_home
	}
	doLast {
		ant.ant antfile: "build.xml", target: "all", dir: platform_home
	}
}

// ./gradlew -DclassName=com.example.test testClass
task testClass(type: automation.HacTestingTask, description: 'Execute test for class') {
	className System.getProperty("className")
	settings hac_settings
}

// ./gradlew -DclassName=com.example.test logEnable
task logEnable(type: automation.HacLoggingTask, description: 'Debug logging for class') {
	className System.getProperty("className")
	settings hac_settings
}

// ./gradlew -DgroovyScript=/path/to/file.groovy runScript
task runScript(type: HacGroovyTask, description: 'Run a groovy script') {
	script System.getProperty("groovyScript")
	settings hac_settings
}

// ./gradlew -Dimpex=/path/to/file.impex importImpex
task importImpex(type: HacImpexTask, description: 'import an impex') {
	impex System.getProperty("impex")
	settings hac_settings
}

// Add all files in the scripts directory as a task
def loadScripts(dir) {
	File scripts = new File(dir)
	scripts.eachFileRecurse FileType.FILES, { file ->
		def name = file.name.take(file.name.lastIndexOf('.'))

		if (name && !(name.startsWith('_') || name.startsWith('.'))) {
			println "Adding task: $name"
			tasks.create(name: "$name", group: file.parentFile.name, type: HacGroovyTask) {
				script "$file"
				settings hac_settings
			}
		}
	}
}
loadScripts(project.rootDir.toString() + "/scripts")

// https://blog.mrhaki.com/2015/10/gradle-goodness-apply-external-script.html
File extTasks = new File(project.rootDir.toString() + "/tasks")
extTasks.eachFileRecurse FileType.FILES, { file ->
	if (file && !(file.name.startsWith('.') || file.name.startsWith('_'))) {
		println "Adding script: $file"
		apply from: "$file"
	}
}

// Load user files
if (project.hasProperty("user_files")) {

	File userDir = new File(user_files)
	if (!userDir.exists()) {
		throw new GradleException('user_files location does not exist')
	}

	File userTasks = new File("$user_files/tasks")
	if (!userTasks.exists()) {
		userTasks.mkdir()
	}
	userTasks.eachFileRecurse FileType.FILES, { file ->
		apply from: "$file"
	}

	File userScripts = new File("$user_files/scripts")
	if (!userScripts.exists()) {
		userScripts.mkdir()
	}
	loadScripts("$user_files/scripts")
}
